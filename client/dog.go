// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hostDog": dog Resource Client
//
// Command:
// $ goagen
// --design=github.com/YAWAL/hostDog/design
// --out=$(GOPATH)\src\github.com\YAWAL\hostDog
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateDogPath computes a request path to the create action of dog.
func CreateDogPath() string {

	return fmt.Sprintf("/hostdog/dogs")
}

// create dog
func (c *Client) CreateDog(ctx context.Context, path string, payload *CreateDogPayload) (*http.Response, error) {
	req, err := c.NewCreateDogRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateDogRequest create the request corresponding to the create action endpoint of the dog resource.
func (c *Client) NewCreateDogRequest(ctx context.Context, path string, payload *CreateDogPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DeleteDogPath computes a request path to the delete action of dog.
func DeleteDogPath(dogID uuid.UUID) string {
	param0 := dogID.String()

	return fmt.Sprintf("/hostdog/dogs/%s", param0)
}

// Delete dog by id
func (c *Client) DeleteDog(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteDogRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteDogRequest create the request corresponding to the delete action endpoint of the dog resource.
func (c *Client) NewDeleteDogRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
