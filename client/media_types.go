// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hostDog": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/YAWAL/hostDog/design
// --out=$(GOPATH)\src\github.com\YAWAL\hostDog
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
)

// Dog entity (default view)
//
// Identifier: dogresponse; view=default
type Dogresponse struct {
	// dog's id
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// dog's name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// id of the dog's host
	Owner *uuid.UUID `form:"owner,omitempty" json:"owner,omitempty" yaml:"owner,omitempty" xml:"owner,omitempty"`
}

// DecodeDogresponse decodes the Dogresponse instance encoded in resp body.
func (c *Client) DecodeDogresponse(resp *http.Response) (*Dogresponse, error) {
	var decoded Dogresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DogresponseCollection is the media type for an array of Dogresponse (default view)
//
// Identifier: dogresponse; type=collection; view=default
type DogresponseCollection []*Dogresponse

// DecodeDogresponseCollection decodes the DogresponseCollection instance encoded in resp body.
func (c *Client) DecodeDogresponseCollection(resp *http.Response) (DogresponseCollection, error) {
	var decoded DogresponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Dogs entity (default view)
//
// Identifier: dogs; view=default
type Dogs struct {
	// list of dogs
	Dogs DogresponseCollection `form:"dogs,omitempty" json:"dogs,omitempty" yaml:"dogs,omitempty" xml:"dogs,omitempty"`
}

// DecodeDogs decodes the Dogs instance encoded in resp body.
func (c *Client) DecodeDogs(resp *http.Response) (*Dogs, error) {
	var decoded Dogs
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Host entity (default view)
//
// Identifier: hostsresponse; view=default
type Hostsresponse struct {
	// host's age
	Age int `form:"age" json:"age" yaml:"age" xml:"age"`
	// host's id
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// host's name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the Hostsresponse media type instance.
func (mt *Hostsresponse) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeHostsresponse decodes the Hostsresponse instance encoded in resp body.
func (c *Client) DecodeHostsresponse(resp *http.Response) (*Hostsresponse, error) {
	var decoded Hostsresponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// HostsresponseCollection is the media type for an array of Hostsresponse (default view)
//
// Identifier: hostsresponse; type=collection; view=default
type HostsresponseCollection []*Hostsresponse

// Validate validates the HostsresponseCollection media type instance.
func (mt HostsresponseCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeHostsresponseCollection decodes the HostsresponseCollection instance encoded in resp body.
func (c *Client) DecodeHostsresponseCollection(resp *http.Response) (HostsresponseCollection, error) {
	var decoded HostsresponseCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// host and list of dogs (default view)
//
// Identifier: hostwithdogs; view=default
type Hostwithdogs struct {
	// list of host's dogs
	Dogs DogresponseCollection `form:"dogs,omitempty" json:"dogs,omitempty" yaml:"dogs,omitempty" xml:"dogs,omitempty"`
	// host's age
	HostAge *int `form:"hostAge,omitempty" json:"hostAge,omitempty" yaml:"hostAge,omitempty" xml:"hostAge,omitempty"`
	// host's name
	HostName *string `form:"hostName,omitempty" json:"hostName,omitempty" yaml:"hostName,omitempty" xml:"hostName,omitempty"`
	// host's id
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
}

// DecodeHostwithdogs decodes the Hostwithdogs instance encoded in resp body.
func (c *Client) DecodeHostwithdogs(resp *http.Response) (*Hostwithdogs, error) {
	var decoded Hostwithdogs
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
