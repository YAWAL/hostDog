// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hostDog": host Resource Client
//
// Command:
// $ goagen
// --design=github.com/YAWAL/hostDog/design
// --out=$(GOPATH)\src\github.com\YAWAL\hostDog
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateHostPath computes a request path to the create action of host.
func CreateHostPath() string {

	return fmt.Sprintf("/hostdog/hosts")
}

// create host
func (c *Client) CreateHost(ctx context.Context, path string, payload *CreateHostPayload) (*http.Response, error) {
	req, err := c.NewCreateHostRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateHostRequest create the request corresponding to the create action endpoint of the host resource.
func (c *Client) NewCreateHostRequest(ctx context.Context, path string, payload *CreateHostPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	return req, nil
}

// DeleteHostPath computes a request path to the delete action of host.
func DeleteHostPath(hostID uuid.UUID) string {
	param0 := hostID.String()

	return fmt.Sprintf("/hostdog/hosts/%s", param0)
}

// delete host by id
func (c *Client) DeleteHost(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteHostRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteHostRequest create the request corresponding to the delete action endpoint of the host resource.
func (c *Client) NewDeleteHostRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetAllHostPath computes a request path to the getAll action of host.
func GetAllHostPath() string {

	return fmt.Sprintf("/hostdog/hosts")
}

// get all hosts
func (c *Client) GetAllHost(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetAllHostRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetAllHostRequest create the request corresponding to the getAll action endpoint of the host resource.
func (c *Client) NewGetAllHostRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetByIDHostPath computes a request path to the getByID action of host.
func GetByIDHostPath(hostID string) string {
	param0 := hostID

	return fmt.Sprintf("/hostdog/hosts/%s", param0)
}

// get list of dogs by host's ID
func (c *Client) GetByIDHost(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetByIDHostRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetByIDHostRequest create the request corresponding to the getByID action endpoint of the host resource.
func (c *Client) NewGetByIDHostRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetDogsByHostIDHostPath computes a request path to the getDogsByHostID action of host.
func GetDogsByHostIDHostPath(hostID string) string {
	param0 := hostID

	return fmt.Sprintf("/hostdog/hosts/%s/dogs", param0)
}

// get list of dogs by host's ID
func (c *Client) GetDogsByHostIDHost(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetDogsByHostIDHostRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetDogsByHostIDHostRequest create the request corresponding to the getDogsByHostID action endpoint of the host resource.
func (c *Client) NewGetDogsByHostIDHostRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
