// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hostDog": Application User Types
//
// Command:
// $ goagen
// --design=github.com/YAWAL/hostDog/design
// --out=$(GOPATH)\src\github.com\YAWAL\hostDog
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
)

// payload for creation of dog
type createDogPayload struct {
	// dog's name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// host's ID
	Owner *uuid.UUID `form:"owner,omitempty" json:"owner,omitempty" yaml:"owner,omitempty" xml:"owner,omitempty"`
}

// Validate validates the createDogPayload type instance.
func (ut *createDogPayload) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Owner == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "owner"))
	}
	return
}

// Publicize creates CreateDogPayload from createDogPayload
func (ut *createDogPayload) Publicize() *CreateDogPayload {
	var pub CreateDogPayload
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.Owner != nil {
		pub.Owner = *ut.Owner
	}
	return &pub
}

// payload for creation of dog
type CreateDogPayload struct {
	// dog's name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// host's ID
	Owner uuid.UUID `form:"owner" json:"owner" yaml:"owner" xml:"owner"`
}

// Validate validates the CreateDogPayload type instance.
func (ut *CreateDogPayload) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}

	return
}

// payload for creation of host
type createHostPayload struct {
	// host's age
	Age *int `form:"age,omitempty" json:"age,omitempty" yaml:"age,omitempty" xml:"age,omitempty"`
	// host's name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the createHostPayload type instance.
func (ut *createHostPayload) Validate() (err error) {
	if ut.Age == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "age"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	return
}

// Publicize creates CreateHostPayload from createHostPayload
func (ut *createHostPayload) Publicize() *CreateHostPayload {
	var pub CreateHostPayload
	if ut.Age != nil {
		pub.Age = *ut.Age
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	return &pub
}

// payload for creation of host
type CreateHostPayload struct {
	// host's age
	Age int `form:"age" json:"age" yaml:"age" xml:"age"`
	// host's name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate validates the CreateHostPayload type instance.
func (ut *CreateHostPayload) Validate() (err error) {

	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}
	return
}
