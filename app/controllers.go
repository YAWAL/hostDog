// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hostDog": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/YAWAL/hostDog/design
// --out=$(GOPATH)\src\github.com\YAWAL\hostDog
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// DogController is the controller interface for the Dog actions.
type DogController interface {
	goa.Muxer
	Create(*CreateDogContext) error
	Delete(*DeleteDogContext) error
}

// MountDogController "mounts" a Dog resource controller on the given service.
func MountDogController(service *goa.Service, ctrl DogController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateDogContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateDogPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/hostdog/dogs", ctrl.MuxHandler("create", h, unmarshalCreateDogPayload))
	service.LogInfo("mount", "ctrl", "Dog", "action", "Create", "route", "POST /hostdog/dogs")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteDogContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/hostdog/dogs/:dogID", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Dog", "action", "Delete", "route", "DELETE /hostdog/dogs/:dogID")
}

// unmarshalCreateDogPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateDogPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createDogPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// HostController is the controller interface for the Host actions.
type HostController interface {
	goa.Muxer
	Create(*CreateHostContext) error
	Delete(*DeleteHostContext) error
	GetAll(*GetAllHostContext) error
	GetByID(*GetByIDHostContext) error
	GetDogsByHostID(*GetDogsByHostIDHostContext) error
}

// MountHostController "mounts" a Host resource controller on the given service.
func MountHostController(service *goa.Service, ctrl HostController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateHostContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateHostPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/hostdog/hosts", ctrl.MuxHandler("create", h, unmarshalCreateHostPayload))
	service.LogInfo("mount", "ctrl", "Host", "action", "Create", "route", "POST /hostdog/hosts")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteHostContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/hostdog/hosts/:hostID", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Host", "action", "Delete", "route", "DELETE /hostdog/hosts/:hostID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAllHostContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetAll(rctx)
	}
	service.Mux.Handle("GET", "/hostdog/hosts", ctrl.MuxHandler("getAll", h, nil))
	service.LogInfo("mount", "ctrl", "Host", "action", "GetAll", "route", "GET /hostdog/hosts")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetByIDHostContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetByID(rctx)
	}
	service.Mux.Handle("GET", "/hostdog/hosts/:hostID", ctrl.MuxHandler("getByID", h, nil))
	service.LogInfo("mount", "ctrl", "Host", "action", "GetByID", "route", "GET /hostdog/hosts/:hostID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetDogsByHostIDHostContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetDogsByHostID(rctx)
	}
	service.Mux.Handle("GET", "/hostdog/hosts/:hostID/dogs", ctrl.MuxHandler("getDogsByHostID", h, nil))
	service.LogInfo("mount", "ctrl", "Host", "action", "GetDogsByHostID", "route", "GET /hostdog/hosts/:hostID/dogs")
}

// unmarshalCreateHostPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateHostPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createHostPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
